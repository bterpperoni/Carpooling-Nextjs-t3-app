// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
// -------------------------------------------------------------------------------------------

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    image         String?
    birthDate     DateTime?
    address       String?
    locality      String?
    zip           Int?
    campus        String?
    role          String?   @default("user")
    accounts      Account[]
    sessions      Session[]
    travelsAsDriver    Travel[]
    travelsAsPassenger Travel[] @relation("Passengers")
}

model Travel {
      id               Int      @id @default(autoincrement())
  departure            String
  departureLatitude    Float
  departureLongitude   Float
  departureDate        DateTime
  destination          String
  destinationLatitude  Float
  destinationLongitude Float
  destinationDate      DateTime
  status               Int      @default(0)
  driverId             String
  driver               User     @relation(fields: [driverId], references: [id])
  passengers           User[]   @relation("Passengers")

  @@index([departureLatitude, departureLongitude], name: "departure")
  @@index([destinationLatitude, destinationLongitude], name: "destination")
}

