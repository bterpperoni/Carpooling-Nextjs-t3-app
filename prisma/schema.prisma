// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------------------USER & FRIEND------------------------------------------------------

model User {
  id                 String        @id @default(cuid())
  name               String        @unique
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  birthDate          DateTime?
  address            String?
  locality           String?
  zip                Int?
  campus             String?
  role               UserRole      @default(USER) 
  rating             Int           @default(0)
  accounts           Account[]
  sessions           Session[]
  ridesAsDriver      Ride[]        @relation("Driver")
  ridesAsPassenger   Booking[]     @relation("UserPassenger")
  groupCreated       Group[]       @relation("GroupCreatedBy")
  groupMembers       GroupMember[] 
  wallet             Wallet[]     
  notified          Notifications[] @relation("userNotified")
  notifying         Notifications[] @relation("userNotifying")
}

enum UserRole {
  USER
  ADMIN
  BANNED
}

// -------------------------------------------Ride & PASSENGER (BOOKING)------------------------------------------------
model Ride {
  id                   Int         @id @default(autoincrement())
  isForGroup           Boolean     @default(false)
  groupId              Int?
  driverId             String
  departure            String
  departureLatitude    Float
  departureLongitude   Float
  departureDateTime    DateTime 
  destination          String
  destinationLatitude  Float
  destinationLongitude Float
  maxPassengers        Int        
  maxDetourDist        Int
  distance             String?        
  type                 RideType   @default(ALLER)
  returnTime           DateTime?
  status               RideStatus  @default(CREATED)
  group                Group?      @relation("GroupRides", fields: [groupId], references: [id])
  driver               User        @relation("Driver", fields: [driverId], references: [id], onDelete: Cascade)
  passengers           Booking[]   @relation("Passengers")
}

model Booking {
  id                 Int    @id @default(autoincrement())
  rideId             Int
  userId             String
  pickupPoint        String
  pickupLatitude     Float
  pickupLongitude    Float
  distanceWithDetour String?
  price              String
  status             BookingStatus @default(CREATED)
  driverRating       Int?     
  ride       Ride   @relation("Passengers", fields: [rideId], references: [id], onDelete: Cascade)
  userPassenger       User   @relation("UserPassenger", fields: [userId], references: [id], onDelete: Cascade)
}

enum RideType {
  ALLER
  RETOUR
}

enum RideStatus {
  CREATED
  UPDATED
  IN_PROGRESS_FORTH
  IN_PROGRESS_BACK
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  CREATED
  UPDATED
  CHECKED
  COMPLETED
  CANCELLED
}

// -------------------------------------------GROUP & GROUPMEMBER------------------------------------------------
model Group {
  id               Int           @id @default(autoincrement())
  name             String
  campus           String
  createdBy        String
  visibility       Boolean       @default(false)
  acceptInvitation Boolean?      @default(true)
  rides            Ride[]        @relation("GroupRides")
  creator          User          @relation("GroupCreatedBy", fields: [createdBy], references: [name], onDelete: Cascade)
  members          GroupMember[] @relation("GroupMembers")
}

model GroupMember {
  id         Int     @id @default(autoincrement())
  groupId    Int
  userName   String
  validated  Boolean @default(true)
  group      Group   @relation("GroupMembers",fields: [groupId], references: [id], onDelete: Cascade)
  userDetail User    @relation(fields: [userName], references: [name], onDelete: Cascade)
}

// ------------------------------------------- WALLET & TRANSACTIONS ------------------------------------------------

model Wallet {
  id            String     @id @default(cuid())
  userId        String
  paypalId      String?
  balance       String   @default("0")
  owner         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromWalletTransaction  Transaction[] @relation("fromWallet")
  toWalletTransaction    Transaction[] @relation("toWallet")
  paypalTransaction      PaypalTransaction[]
}

model Transaction {
  id            Int      @id @default(autoincrement())
  fromWalletId  String
  toWalletId    String
  amount        String
  type          String   @default("Transaction between users")
  createdAt     DateTime @default(now())
  fromWallet    Wallet   @relation("fromWallet",fields: [fromWalletId], references: [id])
  toWallet      Wallet   @relation("toWallet",fields: [toWalletId], references: [id])
}

model PaypalTransaction {
  id        Int      @id @default(autoincrement())
  orderId   String?
  payoutId  String?
  walletId  String
  amount    String
  type      String       
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
}

// ------------------------------------------- NOTIFICATIONS ------------------------------------------------

model Notifications {
  id          Int      @id @default(autoincrement())
  fromUserId  String?
  toUserId    String?
  message     String
  type        NotificationType
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userNotified      User?    @relation("userNotified", fields: [toUserId], references: [id], onDelete: Cascade)
  userNotifying     User?     @relation("userNotifying", fields: [fromUserId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  RIDE
  WALLET
  GROUP
  USER
}