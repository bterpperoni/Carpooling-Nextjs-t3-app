// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------------------USER & FRIEND------------------------------------------------------

model User {
  id                 String        @id @default(cuid())
  name               String        @unique
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  birthDate          DateTime?
  address            String?
  locality           String?
  zip                Int?
  campus             String?
  role               UserRole      @default(USER) 
  // The rating match for the rides as driver because the passengers cannot be rated 
  // (@todo : add rating for passengers)
  rating             Int           @default(0)
  accounts           Account[]
  sessions           Session[]
  ridesAsDriver      Ride[]      @relation("Driver")
  ridesAsPassenger   Booking[]   @relation("UserPassenger")
  groupCreated       Group[]       @relation("GroupCreatedBy")
  groupMembers       GroupMember[] 
  wallet             Wallet[]         
}

enum UserRole {
  USER
  ADMIN
  BANNED
}

// -------------------------------------------Ride & PASSENGER (BOOKING)------------------------------------------------
model Ride {
  id                   Int         @id @default(autoincrement())
  isForGroup           Boolean     @default(false)
  groupId              Int?
  driverId             String
  departure            String
  departureLatitude    Float
  departureLongitude   Float
  // The time match of the maximum time the driver must pick up his last passenger
  // The time at which the driver should start will be calculated approximately based on the number of passengers, distance, etc.
  departureDateTime    DateTime 
  destination          String
  destinationLatitude  Float
  destinationLongitude Float
  maxPassengers        Int        @default(2)
  // The maximum distance that the driver can make a detour to pick up a passenger
  // This field applies to EACH passenger (not the sum of all detours)
  maxDetourDist        Int        @default(10)
  type                              RideType   @default(ALLER)
  // the DATE for RETOUR ride it's the same of departure because the application is based on school timetables (so 1 day only)
  // If the ride is a RETOUR, 'returnTime' is the time when the driver leaves the school
  returnTime           DateTime?
  status               RideStatus  @default(PENDING)
  group                Group?      @relation("GroupRides", fields: [groupId], references: [id])
  driver               User        @relation("Driver", fields: [driverId], references: [name])
  passengers           Booking[]   @relation("Passengers")
}

model Booking {
  id         Int    @id @default(autoincrement())
  rideId     Int
  userName        String
  pickupPoint     String
  pickupLatitude  Float
  pickupLongitude Float
  price           String
  
  // All passengers should rate the driver after the ride
  // An average rating will be calculated and displayed on the driver's profile
  driverRating    Int?     
  ride       Ride   @relation("Passengers", fields: [rideId], references: [id])
  user       User   @relation("UserPassenger", fields: [userName], references: [name])
}

enum RideType {
  ALLER
  RETOUR
}

enum RideStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// enum BookingStatus {
//   PENDING
//   ACCEPTED
//   REFUSED
// }

// -------------------------------------------GROUP & GROUPMEMBER------------------------------------------------
model Group {
  id               Int           @id @default(autoincrement())
  name             String
  campus           String
  createdBy        String
  visibility       Boolean       @default(false)
  acceptInvitation Boolean?      @default(true)
  rides          Ride[]      @relation("GroupRides")
  creator          User          @relation("GroupCreatedBy", fields: [createdBy], references: [name])
  members          GroupMember[] @relation("GroupMembers")
}

model GroupMember {
  id         Int     @id @default(autoincrement())
  groupId    Int
  userName   String
  validated  Boolean @default(true)
  group      Group   @relation("GroupMembers",fields: [groupId], references: [id], onDelete: Cascade)
  userDetail User    @relation(fields: [userName], references: [name], onDelete: Cascade)
}

// ------------------------------------------- WALLET & TRANSACTIONS ------------------------------------------------

model Wallet {
  id            String     @id @default(cuid())
  userId        String
  paypalId      String?
  balance       String   @default("0")
  owner         User     @relation(fields: [userId], references: [id])
  fromWalletTransaction  Transaction[] @relation("fromWallet")
  toWalletTransaction    Transaction[] @relation("toWallet")
  paypalTransaction      PaypalTransaction[]
}

model Transaction {
  id            Int      @id @default(autoincrement())
  fromWalletId  String
  toWalletId    String
  amount        String
  type          String   @default("Transaction between users")
  createdAt     DateTime @default(now())
  fromWallet    Wallet   @relation("fromWallet",fields: [fromWalletId], references: [id])
  toWallet      Wallet   @relation("toWallet",fields: [toWalletId], references: [id])
}

model PaypalTransaction {
  id        Int      @id @default(autoincrement())
  orderId   String?
  payoutId  String?
  walletId  String
  amount    String
  type      String       
  createdAt DateTime @default(now())
  wallet    Wallet   @relation(fields: [walletId], references: [id])
}